// Code generated by protoc-gen-go. DO NOT EDIT.
// source: section.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UnlockedSection struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ContentKey []byte `protobuf:"bytes,2,opt,name=content_key,json=contentKey,proto3" json:"content_key,omitempty"`
}

func (m *UnlockedSection) Reset()                    { *m = UnlockedSection{} }
func (m *UnlockedSection) String() string            { return proto.CompactTextString(m) }
func (*UnlockedSection) ProtoMessage()               {}
func (*UnlockedSection) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *UnlockedSection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UnlockedSection) GetContentKey() []byte {
	if m != nil {
		return m.ContentKey
	}
	return nil
}

type LockedSection struct {
	Encrypted []byte `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
}

func (m *LockedSection) Reset()                    { *m = LockedSection{} }
func (m *LockedSection) String() string            { return proto.CompactTextString(m) }
func (*LockedSection) ProtoMessage()               {}
func (*LockedSection) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *LockedSection) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func init() {
	proto.RegisterType((*UnlockedSection)(nil), "pb.UnlockedSection")
	proto.RegisterType((*LockedSection)(nil), "pb.LockedSection")
}

func init() { proto.RegisterFile("section.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x4d, 0x2e,
	0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x72, 0xe3,
	0xe2, 0x0f, 0xcd, 0xcb, 0xc9, 0x4f, 0xce, 0x4e, 0x4d, 0x09, 0x86, 0x48, 0x0a, 0x09, 0x71, 0xb1,
	0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42, 0xf2, 0x5c,
	0xdc, 0xc9, 0xf9, 0x79, 0x25, 0xa9, 0x79, 0x25, 0xf1, 0xd9, 0xa9, 0x95, 0x12, 0x4c, 0x0a, 0x8c,
	0x1a, 0x3c, 0x41, 0x5c, 0x50, 0x21, 0xef, 0xd4, 0x4a, 0x25, 0x5d, 0x2e, 0x5e, 0x1f, 0x14, 0x53,
	0x64, 0xb8, 0x38, 0x53, 0xf3, 0x92, 0x8b, 0x2a, 0x0b, 0x4a, 0x52, 0x53, 0xc0, 0x46, 0xf1, 0x04,
	0x21, 0x04, 0x92, 0xd8, 0xc0, 0x2e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xed, 0x29, 0xec,
	0xba, 0x92, 0x00, 0x00, 0x00,
}
